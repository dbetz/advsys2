object location {
_child:     nil;
}

object actor {
_parent:    nil;
_sibling:   nil;
}

object thing {
_parent:    nil;
_sibling:   nil;
}

property north, south, east, west;
property name, description;

var multiScreen = false;

def getc()
{
    asm {
        TRAP 0
        RETURN
    }
}

def screen(n)
{
    asm {
      LADDR 0
      LOAD
      TRAP 5
    }
}

def reboot()
{
    asm {
        NATIVE mov t1, #0x80
        NATIVE clkset t1
    }
}

def getp(obj, prop)
{
    var value;
    try {
        value = obj.(prop);
    }
    catch (e) {
        value = 0;
    }
    return value;
}

def connect(c, p)
{
  c._parent = p;
  c._sibling = p._child;
  p._child = c;
}

def disconnect(obj)
{
    var this = obj._parent._child;
    var prev = nil;
    while (this) {
        if (this == obj) {
            if (prev)
                prev._sibling = this._sibling;
            else
                obj._parent._child = this._sibling;
            obj._parent = nil;
            break;
        }
        prev = this;
        this = this._sibling;
    }
}

def printContents(obj, prop)
{
    var desc;
    obj = obj._child;
    while (obj) {
        if ((desc = obj.(prop)) != nil) {
            print " ", #desc;
        }
        obj = obj._sibling;
    }
}

def listContents(actr, prop)
{
    var loc = actr._loc;
    var child = loc._child;
    var first = true;
    var desc;
    while (child) {
        if (child.class != actor && (desc = child.(prop)) != nil) {
            if (first) {
                print "You see:\n";
                first = false;
            }
            print "  ", #desc, "\n";
        }
        child = child._sibling;
    }
}

def look(actr)
{
    var loc = actr._loc;
    print #loc.description, "\n";
    listContents(actr, name);
}

def announce(actr)
{
    var loc = actr._loc;
    var child = loc._child;
    while (child) {
        if (child.class == actor && child != actr)
            print #child.name, " is here.\n";
        child = child._sibling;
    }
}

def announceMovement(actr, loc, tail)
{
    var child = loc._child;
    while (child) {
        if (child.class == actor && child != actr) {
            screen(child.index);
            print #actr.name, #tail;
        }
        child = child._sibling;
    }
}

def move(actr, dir)
{
    var oldloc = actr._loc;
    var newloc = getp(oldloc, dir);
    if (newloc) {
        disconnect(actr);
        connect(actr, newloc);
        look(actr);
        announce(actr);
        if (multiScreen) {
            announceMovement(actr, oldloc, " left.\n");
            announceMovement(actr, newloc, " arrived.\n");
            screen(actr.index);
        }
    }
    else {
        print "You can't go that way!\n";
    }
}

def initActor(actr)
{
    screen(actr.index);
    look(actr);
}

def checkActor(actr)
{
    var ch;
    
    // switch to the actor's screen
    screen(actr.index);
    
    // check for actor input
    if ((ch = getc()) != 0 && ch != '\n') {
        if (ch == 'n')
            move(actr, north);
        else if (ch == 's')
            move(actr, south);
        else if (ch == 'e')
            move(actr, east);
        else if (ch == 'w')
            move(actr, west);
        else if (ch == 'l')
            look(actr);
        else if (ch == 'q')
            reboot();
        else
            print "Huh?\n";
    }
}
